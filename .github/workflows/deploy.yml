name: Deploy Medusa Application

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t image-name:latest .

      - name: Tag Docker image
        run: |
          docker tag image-name:latest ${{ steps.ecr-login.outputs.registry }}/medusa-app:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/medusa-app:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5  # Change to your desired version

      - name: Terraform Init
        run: terraform init
        working-directory: ./medusa-terraform  # Adjust to your Terraform configuration directory

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
          aws-region: us-east-2

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Medusa Application
        run: |
          echo "$SSH_PRIVATE_KEY" > medusa.pem
          chmod 600 medusa.pem
          ssh -o StrictHostKeyChecking=no -i medusa.pem ubuntu@$EC2_HOST << 'EOF'
            # Pull the latest image from ECR
            docker pull ${{ steps.ecr-login.outputs.registry }}/medusa-app:latest
            
            # Stop and remove the existing container if it exists
            docker stop my-medusa-app || true
            docker rm my-medusa-app || true
            
            # Run the new container with the latest image
            docker run -d --name my-medusa-app -p 80:7001 -e DATABASE_URL=$DATABASE_URL ${{ steps.ecr-login.outputs.registry }}/medusa-app:latest
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
